package com.Grandeur.GranduerBackend.models;

import com.Grandeur.GranduerBackend.modelEnums.ClientRole;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;

@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode

@Entity
@Table(name = "clients")
public class Client implements UserDetails {

    // primary key annotation //
    @Id
    @SequenceGenerator(
            name = "user_sequence",
            sequenceName = "user_sequence",
            allocationSize = 1
    )
    // Automatically generated and incremented //
    @GeneratedValue(
            strategy =  GenerationType.SEQUENCE,
            generator = "user_sequence"
    )
    // userId that's used to uniquely identify for every user  (automatically  generated by JPA) //
    private Long id;

    @Column(nullable = false, updatable = false)
    private String name;
    @Column(nullable = false, updatable = false, unique = true)
    private String email; // userEmail //
    @Column(nullable = false, updatable = false)
    private String password; // userPassword //

    @Enumerated(EnumType.STRING)
    private ClientRole clientRole;


    private Boolean locked = false;
    private Boolean enabled = false;

    // Parameterized constructor //
    public Client(String name,String email, String password, ClientRole clientRole){
        this.name = name;
        this.email = email;
        this.password = password;
        this.clientRole = clientRole;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return null;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return name;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }
}
